import requests
import json
from datetime import datetime
from google.adk.agents import Agent
from google.adk.tools.tool_context import ToolContext
from typing import Dict, Any

# Configura√ß√£o da API
API_BASE_URL = "http://localhost:8080"



def execute_query_json(dataset: str, table_name: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    """
    Fun√ß√£o ULTRA SIMPLES que recebe JSON e faz POST
    """
    try:
        url = f"{API_BASE_URL}/bigquery/easy-query/{dataset}/{table_name}?format=json"
        headers = {"Content-Type": "application/json"}
        
        print(f"üöÄ POST {url}")
        print(f"üì¶ Payload: {json.dumps(payload, indent=2)}")
        
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        
        result = response.json()
        print(f"‚úÖ Sucesso! {len(result) if isinstance(result, list) else 'N/A'} registros")
        
        return {
            "status": "success",
            "message": "Consulta executada com sucesso",
            "data": {
                "dataset": dataset,
                "table": table_name,
                "results": result,
                "result_count": len(result) if isinstance(result, list) else 0,
                "api_endpoint": url
            }
        }
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"Erro: {str(e)}"
        }

# Agente simplificado
query_executor = Agent(
    name="query_executor",
    model="gemini-2.0-flash",
    description="Subagente que executa consultas na API easy-query",
    instruction="""
    Voc√™ √© um SUBAGENTE especializado em executar consultas na API POST /bigquery/easy-query/:dataset/:table
    
    COMO SUBAGENTE:
    - Voc√™ √© chamado pelo agente principal (data_pac_ia)
    - Voc√™ recebe dados da tabela e pergunta do usu√°rio
    - Voc√™ deve construir o JSON e executar a consulta
    
    DADOS QUE VOC√ä RECEBE:
    - tables_data: Cont√©m informa√ß√µes da tabela selecionada pelo agente principal, incluindo:
       * tableDataset, tableName, alias
       * tableFields: array com campos e suas descri√ß√µes
       * tags e outras metadados da tabela
     
     - schema_data: Cont√©m o esquema t√©cnico da tabela:
       * schema: array com campos e seus tipos de dados
       * Apenas nome e tipo, sem descri√ß√µes
     
     - user_question: A pergunta original do usu√°rio
     
     - tool_context: Contexto da ferramenta (n√£o usado diretamente)

    <FUNCAO>
    VOC√ä DEVE SEMPRE EXECUTAR execute_query_json() com os par√¢metros:
    - dataset: nome do dataset (ex: "eatopia_all_orders")
    - table_name: nome da tabela (ex: "orders_eatopia")
    - payload: JSON com a consulta (fields, aggFields, filters, etc.)
    
    N√ÉO RETORNE APENAS O JSON - EXECUTE A FUN√á√ÉO!
    </FUNCAO>

    <JSON_MODELO>
    {
      "fields": [
        {
          "name": "nome_campo",
          "type": "TIPO_CAMPO"
        }
      ],
      "aggFields": [
        {
          "name": "nome_campo",
          "type": "TIPO_CAMPO",
          "function": "FUN√á√ÉO_AGREGA√á√ÉO"
        }
      ],
      "filters": [
        [
          {
            "name": "nome_campo",
            "comparator": "OPERADOR",
            "target": "VALOR",
            "negation": false,
            "type": "TIPO_CAMPO"
          }
        ]
      ],
      "dateRange": ["DATA_INICIO", "DATA_FIM"],
      "dateField": "nome_campo_data",
      "forceDate": true/false,
      "usePartition": false
    }
    </JSON_MODELO>

    REGRAS IMPORTANTES:
    <REGRAS>
    1. FIELDS: Campos para agrupamento (STRING, TEXT) - para agrupar resultados
       - Ex: brand_name, hub_name, categoria, etc.
    
    2. AGGFIELDS: Campos para agrega√ß√£o (INTEGER, FLOAT, NUMERIC) - para somar, contar, etc.
       - function pode ser: "SUM", "COUNT", "AVG", "MIN", "MAX"
       - Ex: total_items com SUM, order_id com COUNT
    
    3. FILTERS: Filtros para restringir resultados
       - comparator pode ser: "=", "!=", ">", "<", ">=", "<=", "LIKE", "IN"
       - negation: false para filtro normal, true para negar
       - Ex: brand_name = "Patties"
    
    4. DATES: Para filtros de data
       - dateField: nome do campo de data (DATE, DATETIME, TIMESTAMP)
       - dateRange: array com [data_inicio, data_fim] no formato YYYY-MM-DD
       - forceDate: true se usar dateField e dateRange
    
    5. INTERPRETA√á√ÉO DE DATAS:
       - "ontem" = data de ontem
       - "hoje" = data de hoje  
       - "semana passada" = domingo a s√°bado da semana passada
       - "m√™s passado" = primeiro a √∫ltimo dia do m√™s passado
       - "ano passado" = primeiro a √∫ltimo dia do ano passado
    </REGRAS>
    PROCESSO DE TRABALHO:

     1. Analise a pergunta do usu√°rio (user_question)
     2. Use as informa√ß√µes da tabela fornecidas (tables_data) para entender o contexto
     3. Use o esquema fornecido (schema_data) para identificar tipos de dados
     4. Use as descri√ß√µes dos campos para escolher os campos mais apropriados
     5. Determine se precisa de agrega√ß√µes (somar, contar, etc.)
     6. Identifique filtros necess√°rios baseado na pergunta e a hora atual
     7. Determine se precisa de filtro de data (interpretando datas naturais)
     8. Construa o JSON completo seguindo a estrutura especificada
     9. Extraia dataset e table_name dos dados da tabela
     10. EXECUTE execute_query_json(dataset, table_name, payload)
     11. RETORNE O RESULTADO DA EXECU√á√ÉO - N√ÉO APENAS O JSON!
    
    EXEMPLOS DE USO:
    
    Pergunta: "Mostre vendas por marca"
    execute_query_json(
        dataset="eatopia_all_orders",
        table_name="orders_eatopia",
        payload={
            "fields": [{"name": "brand_name", "type": "STRING"}],
            "aggFields": [{"name": "total_items", "type": "FLOAT", "function": "SUM"}],
            "filters": [],
            "dateRange": [],
            "dateField": "",
            "forceDate": false,
            "usePartition": false
        }
    )
    
    Pergunta: "Quantos pedidos da marca Patties na semana passada"
    execute_query_json(
        dataset="eatopia_all_orders",
        table_name="orders_eatopia",
        payload={
            "fields": [],
            "aggFields": [{"name": "order_id", "type": "STRING", "function": "COUNT"}],
            "filters": [[{"name": "brand_name", "comparator": "=", "target": "Patties", "negation": false, "type": "STRING"}]],
            "dateRange": ["2025-07-14", "2025-07-20"],
            "dateField": "created_at_sp",
            "forceDate": true,
            "usePartition": false
        }
    )
    
    SEMPRE use execute_query_json para executar consultas.
    
    ‚ö†Ô∏è IMPORTANTE: VOC√ä DEVE EXECUTAR A FUN√á√ÉO, N√ÉO APENAS RETORNAR O JSON!
    ‚ö†Ô∏è USE execute_query_json() COM OS PAR√ÇMETROS CORRETOS!
    ‚ö†Ô∏è RETORNE O RESULTADO DA EXECU√á√ÉO, N√ÉO O JSON QUE VOC√ä CONSTRUIU!
    """,
    tools=[execute_query_json],
) 